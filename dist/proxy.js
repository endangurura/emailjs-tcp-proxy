"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _socket = _interopRequireDefault(require("socket.io"));

var _net = _interopRequireDefault(require("net"));

var _os = _interopRequireDefault(require("os"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _default = function _default(server, log) {
  (0, _socket["default"])(server).on('connection', function (socket) {
    var id = socket.conn.id;
    var remote = socket.conn.remoteAddress;
    log && log.info('io', 'New connection [%s] from %s', id, remote);
    socket.on('open', function (_ref, fn) {
      var host = _ref.host,
          port = _ref.port;
      log && log.verbose('io', 'Open request to %s:%s [%s]', host, port, id);

      var tcp = _net["default"].connect(port, host, function () {
        log && log.verbose('io', 'Opened tcp connection to %s:%s [%s]', host, port, id);
        tcp.on('data', function (chunk) {
          log && log.silly('io', 'Received %s bytes from %s:%s [%s]', chunk.length, host, port, id);
          socket.emit('data', chunk);
        });
        tcp.on('error', function (err) {
          log && log.verbose('io', 'Error for %s:%s [%s]: %s', host, port, id, err.message);
          socket.emit('error', err.message);
        });
        tcp.on('end', function () {
          return socket.emit('end');
        });
        tcp.on('close', function () {
          log && log.verbose('io', 'Closed tcp connection to %s:%s [%s]', host, port, id);
          socket.emit('close');
          socket.removeAllListeners('data');
          socket.removeAllListeners('end');
        });
        socket.on('data', function (chunk, fn) {
          if (!chunk || !chunk.length) {
            if (typeof fn === 'function') {
              fn();
            }

            return;
          }

          log && log.silly('io', 'Sending %s bytes to %s:%s [%s]', chunk.length, host, port, id);
          tcp.write(chunk, function () {
            if (typeof fn === 'function') {
              fn();
            }
          });
        });
        socket.on('end', function () {
          log && log.verbose('io', 'Received request to close connection to %s:%s [%s]', host, port, id);
          tcp.end();
        });

        if (typeof fn === 'function') {
          fn(_os["default"].hostname()); // reply with hostname once we're set up
        }

        socket.on('disconnect', function () {
          log && log.verbose('io', 'Closed connection [%s], closing connection to %s:%s ', id, host, port);
          tcp.end();
          socket.removeAllListeners();
        });
      });
    });
  });
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm94eS5qcyJdLCJuYW1lcyI6WyJzZXJ2ZXIiLCJsb2ciLCJvbiIsInNvY2tldCIsImlkIiwiY29ubiIsInJlbW90ZSIsInJlbW90ZUFkZHJlc3MiLCJpbmZvIiwiZm4iLCJob3N0IiwicG9ydCIsInZlcmJvc2UiLCJ0Y3AiLCJuZXQiLCJjb25uZWN0IiwiY2h1bmsiLCJzaWxseSIsImxlbmd0aCIsImVtaXQiLCJlcnIiLCJtZXNzYWdlIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwid3JpdGUiLCJlbmQiLCJvcyIsImhvc3RuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7ZUFFZSxrQkFBQ0EsTUFBRCxFQUFTQyxHQUFULEVBQWlCO0FBQzlCLDBCQUFTRCxNQUFULEVBQWlCRSxFQUFqQixDQUFvQixZQUFwQixFQUFrQyxVQUFBQyxNQUFNLEVBQUk7QUFDMUMsUUFBTUMsRUFBRSxHQUFHRCxNQUFNLENBQUNFLElBQVAsQ0FBWUQsRUFBdkI7QUFDQSxRQUFNRSxNQUFNLEdBQUdILE1BQU0sQ0FBQ0UsSUFBUCxDQUFZRSxhQUEzQjtBQUNBTixJQUFBQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ08sSUFBSixDQUFTLElBQVQsRUFBZSw2QkFBZixFQUE4Q0osRUFBOUMsRUFBa0RFLE1BQWxELENBQVA7QUFFQUgsSUFBQUEsTUFBTSxDQUFDRCxFQUFQLENBQVUsTUFBVixFQUFrQixnQkFBaUJPLEVBQWpCLEVBQXdCO0FBQUEsVUFBckJDLElBQXFCLFFBQXJCQSxJQUFxQjtBQUFBLFVBQWZDLElBQWUsUUFBZkEsSUFBZTtBQUN4Q1YsTUFBQUEsR0FBRyxJQUFJQSxHQUFHLENBQUNXLE9BQUosQ0FBWSxJQUFaLEVBQWtCLDRCQUFsQixFQUFnREYsSUFBaEQsRUFBc0RDLElBQXRELEVBQTREUCxFQUE1RCxDQUFQOztBQUNBLFVBQU1TLEdBQUcsR0FBR0MsZ0JBQUlDLE9BQUosQ0FBWUosSUFBWixFQUFrQkQsSUFBbEIsRUFBd0Is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QU0sQ0FBQ0QsRUFBUCxDQUFVLFlBQVYsRUFBd0IsWUFBWTtBQUNsQ0QsVUFBQUEsR0FBRyxJQUFJQSxHQUFHLENBQUNXLE9BQUosQ0FBWSxJQUFaLEVBQWtCLHNEQUFsQixFQUEwRVIsRUFBMUUsRUFBOEVNLElBQTlFLEVBQW9GQyxJQUFwRixDQUFQO0FBQ0FFLFVBQUFBLEdBQUcsQ0FBQ1csR0FBSjtBQUNBckIsVUFBQUEsTUFBTSxDQUFDbUIsa0JBQVA7QUFDRCxTQUpEO0FBS0QsT0FwRFcsQ0FBWjtBQXFERCxLQXZERDtBQXdERCxHQTdERDtBQThERCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNvY2tldGlvIGZyb20gJ3NvY2tldC5pbydcbmltcG9ydCBuZXQgZnJvbSAnbmV0J1xuaW1wb3J0IG9zIGZyb20gJ29zJ1xuXG5leHBvcnQgZGVmYXVsdCAoc2VydmVyLCBsb2cpID0+IHtcbiAgc29ja2V0aW8oc2VydmVyKS5vbignY29ubmVjdGlvbicsIHNvY2tldCA9PiB7XG4gICAgY29uc3QgaWQgPSBzb2NrZXQuY29ubi5pZFxuICAgIGNvbnN0IHJlbW90ZSA9IHNvY2tldC5jb25uLnJlbW90ZUFkZHJlc3NcbiAgICBsb2cgJiYgbG9nLmluZm8oJ2lvJywgJ05ldyBjb25uZWN0aW9uIFslc10gZnJvbSAlcycsIGlkLCByZW1vdGUpXG5cbiAgICBzb2NrZXQub24oJ29wZW4nLCAoeyBob3N0LCBwb3J0IH0sIGZuKSA9PiB7XG4gICAgICBsb2cgJiYgbG9nLnZlcmJvc2UoJ2lvJywgJ09wZW4gcmVxdWVzdCB0byAlczolcyBbJXNdJywgaG9zdCwgcG9ydCwgaWQpXG4gICAgICBjb25zdCB0Y3AgPSBuZXQuY29ubmVjdChwb3J0LCBob3N0LCAoKSA9PiB7XG4gICAgICAgIGxvZyAmJiBsb2cudmVyYm9zZSgnaW8nLCAnT3BlbmVkIHRjcCBjb25uZWN0aW9uIHRvICVzOiVzIFslc10nLCBob3N0LCBwb3J0LCBpZClcblxuICAgICAgICB0Y3Aub24oJ2RhdGEnLCBjaHVuayA9PiB7XG4gICAgICAgICAgbG9nICYmIGxvZy5zaWxseSgnaW8nLCAnUmVjZWl2ZWQgJXMgYnl0ZXMgZnJvbSAlczolcyBbJXNdJywgY2h1bmsubGVuZ3RoLCBob3N0LCBwb3J0LCBpZClcbiAgICAgICAgICBzb2NrZXQuZW1pdCgnZGF0YScsIGNodW5rKVxuICAgICAgICB9KVxuXG4gICAgICAgIHRjcC5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICAgIGxvZyAmJiBsb2cudmVyYm9zZSgnaW8nLCAnRXJyb3IgZm9yICVzOiVzIFslc106ICVzJywgaG9zdCwgcG9ydCwgaWQsIGVyci5tZXNzYWdlKVxuICAgICAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsIGVyci5tZXNzYWdlKVxuICAgICAgICB9KVxuXG4gICAgICAgIHRjcC5vbignZW5kJywgKCkgPT4gc29ja2V0LmVtaXQoJ2VuZCcpKVxuXG4gICAgICAgIHRjcC5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgbG9nICYmIGxvZy52ZXJib3NlKCdpbycsICdDbG9zZWQgdGNwIGNvbm5lY3Rpb24gdG8gJXM6JXMgWyVzXScsIGhvc3QsIHBvcnQsIGlkKVxuICAgICAgICAgIHNvY2tldC5lbWl0KCdjbG9zZScpXG5cbiAgICAgICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJylcbiAgICAgICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCdlbmQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHNvY2tldC5vbignZGF0YScsIChjaHVuaywgZm4pID0+IHtcbiAgICAgICAgICBpZiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgZm4oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZyAmJiBsb2cuc2lsbHkoJ2lvJywgJ1NlbmRpbmcgJXMgYnl0ZXMgdG8gJXM6JXMgWyVzXScsIGNodW5rLmxlbmd0aCwgaG9zdCwgcG9ydCwgaWQpXG4gICAgICAgICAgdGNwLndyaXRlKGNodW5rLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGZuKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIHNvY2tldC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIGxvZyAmJiBsb2cudmVyYm9zZSgnaW8nLCAnUmVjZWl2ZWQgcmVxdWVzdCB0byBjbG9zZSBjb25uZWN0aW9uIHRvICVzOiVzIFslc10nLCBob3N0LCBwb3J0LCBpZClcbiAgICAgICAgICB0Y3AuZW5kKClcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZm4ob3MuaG9zdG5hbWUoKSkgLy8gcmVwbHkgd2l0aCBob3N0bmFtZSBvbmNlIHdlJ3JlIHNldCB1cFxuICAgICAgICB9XG5cbiAgICAgICAgc29ja2V0Lm9uKCdkaXNjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxvZyAmJiBsb2cudmVyYm9zZSgnaW8nLCAnQ2xvc2VkIGNvbm5lY3Rpb24gWyVzXSwgY2xvc2luZyBjb25uZWN0aW9uIHRvICVzOiVzICcsIGlkLCBob3N0LCBwb3J0KVxuICAgICAgICAgIHRjcC5lbmQoKVxuICAgICAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufVxuIl19